# This script is used to launch sbt on the Jenkins build servers.

# The default sbt configuration makes some assumptions that are not compatible
# with execution in a Jenkins continuous integration environment. This script
# tweaks the configuration to allow Jenkins to run sbt. 

# The sbt launcher bootstraps itself by downloading its dependencies (jna,
# Scala, sbt itself) from the Maven Central and org.scala-tools repositories.
# To reduce build time, the script configures the launcher to retrieve these
# dependencies from caches on Netflix's Artifactory instance. This is done by
# providing the launcher with an sbt.boot.properties file that overrides the
# default repositories: 

# -Dsbt.boot.properties=sbt.boot.properties

# Ordinarily, the sbt launcher downloads the core sbt jars to $HOME/.sbt/boot.
# However, the "builds" user's home directory is, by design, not writable on
# the Jenkins servers, so the script configures the launcher to put sbt in a 
# .sbt directory in the Jenkins workspace:

# -Dsbt.boot=$WORKSPACE/.sbt

# Similarly, sbt creates an Ivy cache in $HOME/.ivy2 by default. This is not
# possible for Jenkins' "builds" user, so the script configures the launcher
# to put the cache in the .ivy2 directory in the Jenkins workspace:

# -Divy.home=$WORKSPACE/.ivy2

# sbt's console output is "colorized" with ANSI escape codes by default. These
# escape codes are meaningless to Jenkins, so the script surpresses them:

# -Dsbt.log.noformat=true

java -Xmx1024m -XX:MaxPermSize=256m -Dbuild.number="$BUILD_NUMBER" -Dsbt.boot=$WORKSPACE/.sbt -Divy.home=$WORKSPACE/.ivy2 -Dsbt.log.noformat=true -jar `dirname $0`/lib/sbt-launch.jar "$@"

